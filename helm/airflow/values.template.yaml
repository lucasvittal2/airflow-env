webserverSecretKey: f1023ed56bd3eb8ee2b069c5eec748b5
deployParams:
  AKS_AIRFLOW_NAMESPACE: <AKS_AIRFLOW_NAMESPACE>
  AZ_TENANT_ID: <AZ_TENANT_ID>
  SERVICE_ACCOUNT_NAME: <SERVICE_ACCOUNT_NAME>
  MY_IDENTITY_NAME: <MY_IDENTITY_NAME>
  KEYVAULT_URL: <KEYVAULT_URL>
  AKS_AIRFLOW_LOGS_STORAGE_SECRET_NAME: <AKS_AIRFLOW_LOGS_STORAGE_SECRET_NAME>
  AKS_AIRFLOW_LOGS_STORAGE_CONTAINER_NAME: <AKS_AIRFLOW_LOGS_STORAGE_CONTAINER_NAME>
  AKS_AIRFLOW_LOGS_STORAGE_ACCOUNT_NAME : <AKS_AIRFLOW_LOGS_STORAGE_ACCOUNT_NAME>
  MY_RESOURCE_GROUP_NAME: <MY_RESOURCE_GROUP_NAME>
  MY_IDENTITY_NAME_CLIENT_ID: <MY_IDENTITY_NAME_CLIENT_ID>
  TENANT_ID: <TENANT_ID>
  KEYVAULTURL: <KEYVAULTURL>

images:
  airflow:
    repository: <MY_ACR_REGISTRY>.azurecr.io/airflow
    tag: 2.9.3
    # Specifying digest takes precedence over tag.
    digest: ~
    pullPolicy: IfNotPresent
  # To avoid images with user code, you can turn this to 'true' and
  # all the 'run-airflow-migrations' and 'wait-for-airflow-migrations' containers/jobs
  # will use the images from 'defaultAirflowRepository:defaultAirflowTag' values
  # to run and wait for DB migrations .
  useDefaultImageForMigration: false
  # timeout (in seconds) for airflow-migrations to complete
  migrationsWaitTimeout: 60
  pod_template:
    # Note that \`images.pod_template.repository\` and \`images.pod_template.tag\` parameters
    # can be overridden in \`config.kubernetes\` section. So for these parameters to have effect
    # \`config.kubernetes.worker_container_repository\` and \`config.kubernetes.worker_container_tag\`
    # must be not set .
    repository: <MY_ACR_REGISTRY>.azurecr.io/airflow
    tag: 2.9.3
    pullPolicy: IfNotPresent
  flower:
    repository: <MY_ACR_REGISTRY>.azurecr.io/airflow
    tag: 2.9.3
    pullPolicy: IfNotPresent
  statsd:
    repository: <MY_ACR_REGISTRY>.azurecr.io/statsd-exporter
    tag: v0.26.1
    pullPolicy: IfNotPresent
  pgbouncer:
    repository: <MY_ACR_REGISTRY>.azurecr.io/airflow
    tag: airflow-pgbouncer-2024.01.19-1.21.0
    pullPolicy: IfNotPresent
  pgbouncerExporter:
    repository: <MY_ACR_REGISTRY>.azurecr.io/airflow
    tag: airflow-pgbouncer-exporter-2024.06.18-0.17.0
    pullPolicy: IfNotPresent
  gitSync:
    repository: <MY_ACR_REGISTRY>.azurecr.io/git-sync
    tag: v4.1.0
    pullPolicy: IfNotPresent

# Airflow executor
executor: "KubernetesExecutor"

# Environment variables for all airflow containers
env:
  - name: ENVIRONMENT
    value: dev

extraEnv: |
  - name: AIRFLOW__CORE__DEFAULT_TIMEZONE
    value: 'America/New_York'

# Configuration for postgresql subchart
# Not recommended for production! Instead, spin up your own Postgresql server and use the \`data\` attribute in this
# yaml file.
postgresql:
  enabled: true

# Enable pgbouncer. See https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#pgbouncer
pgbouncer:
  enabled: true

dags:
  persistence:
    enabled: false  # IMPORTANT: Must be false when using git sync
  gitSync:
    enabled: true
    repo: https://github.com/lucasvittal2/airflow-env.git
    branch: dev
    rev: HEAD
    depth: 1
    maxFailures: 3
    subPath: "src/python/dags"
    wait: 60
    sshKeySecret: airflow-git-ssh-secret


logs:
  persistence:
    enabled: true
    existingClaim: pvc-airflow-logs
    storageClassName: azureblob-fuse-premium

# We disable the log groomer sidecar because we use Azure Blob Storage for logs, with lifecyle policy set.
triggerer:
  logGroomerSidecar:
    enabled: false

scheduler:
  logGroomerSidecar:
    enabled: false

workers:
  logGroomerSidecar:
    enabled: false